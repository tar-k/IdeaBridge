from sqlalchemy.orm import Session
from sqlalchemy import and_
from datetime import datetime
from app import models


class RewardAchievementService:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –Ω–∞–≥—Ä–∞–¥.
    –ù–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –∏ –º–æ–Ω–µ—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    """

    def __init__(self, db: Session):
        self.db = db

    def add_points(self, user_id: int, action_key: str):
        """
        –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –¥–µ–π—Å—Ç–≤–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã points_rules.
        """
        # –ù–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        rule = self.db.query(models.PointsRule).filter_by(action_key=action_key).first()
        if not rule:
            return None  # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        user = self.db.query(models.User).filter_by(user_id=user_id).first()
        if not user:
            return None

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∏ –º–æ–Ω–µ—Ç
        user.points += rule.points_amount
        user.coins += rule.coins_amount

        # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
        log = models.PointsLog(
            user_id=user_id,
            action=action_key,
            points=rule.points_amount,
            coins=rule.coins_amount,
            # created_at=datetime.utcnow()
        )
        self.db.add(log)
        self.db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.check_achievements(user_id)

        
        return {"points_added": rule.points_amount, "coins_added": rule.coins_amount}

    def check_achievements(self, user_id: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        user = self.db.query(models.User).filter(models.User.user_id == user_id).first()
        if not user:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–¥–µ–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ideas_count = self.db.query(models.Idea).filter(models.Idea.author_id == user_id).count()
        comments_count = self.db.query(models.Comment).filter(models.Comment.user_id == user_id).count()
        likes_received = self.db.query(models.Vote).join(models.Idea).filter(
            models.Idea.author_id == user_id, models.Vote.vote_type == True
        ).count()

        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        rules = {
            "first_idea": ideas_count >= 1,
            "ten_ideas": ideas_count >= 10,
            "five_comments": comments_count >= 5,
            "hundred_likes": likes_received >= 100
        }

        for key, condition in rules.items():
            if condition:
                achievement = self.db.query(models.Achievement).filter(models.Achievement.condition_key == key).first()
                if achievement:
                    already_awarded = self.db.query(models.UserAchievement).filter_by(
                        user_id=user_id, achievement_id=achievement.achievement_id
                    ).first()
                    if not already_awarded:
                        self._grant_achievement(user, achievement)
                        print(f"‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {achievement.name} –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.email}")

        self.db.commit()

    def _grant_achievement(self, user: models.User, achievement: models.Achievement):
        """
        –í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        user_ach = models.UserAchievement(
            user_id=user.user_id,
            achievement_id=achievement.achievement_id,
            # awarded_at=datetime.utcnow()
        )
        self.db.add(user_ach)
        self.db.commit()
        # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã/–æ—á–∫–∏
        if achievement.reward_points or achievement.reward_coins:
            user.points += achievement.reward_points
            user.coins += achievement.reward_coins
            self.db.refresh(user)

        # üîî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        from app.services.notifications_service import NotificationService
        NotificationService(self.db).create_notification(
            user_id=user.user_id,
            title="–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!",
            message=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´{achievement.name}¬ª üéâ"
        )
